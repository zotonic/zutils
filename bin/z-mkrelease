#!/usr/bin/env python
import time
import sys
import os
import re
import zutils
from zutils import Version, cmdOutput

z = zutils.Zotonic()

if len(sys.argv) != 2:
    print("Usage: z-mkrelease <version>")
    releaseVersion = z.nextVersion()
    print("Next version: " + releaseVersion)
    exit(1)

releaseVersion = sys.argv[1]

if releaseVersion in z.versions:
    raise Exception("Already released: " + releaseVersion)

if Version(releaseVersion).prev not in z.versions:
    raise Exception("Version numbers have to be sequential: " + releaseVersion)


## GO TO RELEASE BRANCH

os.system("git checkout release-%s" % Version(releaseVersion).featureversion)


## VERSION NUMBERS

os.system("sed -e 's/ZOTONIC_VERSION, \".*\"/ZOTONIC_VERSION, \"%s\"/' -i %s/include/zotonic_release.hrl" % (releaseVersion, z.basedir))
os.system("sed -e 's/{vsn, \".*\"/{vsn, \"%s\"/' -i %s/src/zotonic.app" % (releaseVersion, z.basedir))


## CHANGE LOG

changelogFile = "%s/doc/changelogs/%s.txt" % (z.basedir, releaseVersion)
fp = open(changelogFile, "w")
hdr = "Zotonic %s" % releaseVersion
fp.write(hdr+"\n")
fp.write("="*len(hdr) + "\n")
fp.write("\n")
fp.write("Released on %s by %s.\n" % (time.strftime("%Y-%m-%d %H:%M", time.localtime()), os.environ['USER']))
fp.write("\n")
fp.write("\n")

z.printLog(fp, releaseVersion)
fp.close()

# launch editor to finetine the change log
editor = os.environ.get('EDITOR', 'vi')
os.system("%s %s" % (editor, changelogFile))

os.system("git add %s" % changelogFile)

print "............................... releasing................."

## NEWS FILE

l = open("%s/NEWS" % z.basedir, "r").readlines()
hdr = "Release %s, released on %s" % (releaseVersion, time.strftime("%Y-%m-%d", time.localtime()))
l = l[:3] + [hdr+"\n", "-"*len(hdr)+"\n", "\n",
             "This is a bugfix release. See doc/changelogs/%s.txt for all the\n" % releaseVersion, "relevant bugfixes.\n", "\n\n"] + l[3:]
open("%s/NEWS" % z.basedir, "w").write("".join(l))

## COMMIT, TAG
os.system("git add NEWS src/zotonic.app include/zotonic_release.hrl")
os.system("git ci -m 'Created release %s.'" % releaseVersion)
os.system("git tag release-%s" % releaseVersion)

## CREATE ARCHIVE
os.system("z-archive " + releaseVersion)

# back to where we started
os.system("git checkout master")
